from flask_security import UserMixin
from src.extensions.db import db
from src.models.user_roles import UserRoles
from sqlalchemy.orm import Mapped, mapped_column, relationship
from src.models.role import Role


class User(db.Model, UserMixin):
    """
    User model for database

    :param id: integer, primary key, auto increment
    :param username: string, use email as username
    :param password: string, at least 8 characters, one letter and one number is required
    :param email: string
    :param name: string
    :param active: boolean, default false
    :param roles: list of roles
    :param fs_uniquifier: string, auto generated by flask-security
    """
    id: Mapped[int] = mapped_column(db.BigInteger(), primary_key=True, autoincrement=True)
    username: Mapped[str] = mapped_column(db.String(30), unique=True, nullable=False)
    password: Mapped[str] = mapped_column(db.String(255))
    email: Mapped[str] = mapped_column(db.String(100), unique=True, nullable=False)
    name: Mapped[str] = mapped_column(db.String(80), nullable=False)
    active: Mapped[bool] = mapped_column(db.Boolean(), default=False)
    roles: Mapped[list[Role]] = relationship("Role", secondary=UserRoles.__tablename__,
                                             backref=db.backref('user', lazy='dynamic'))
    fs_uniquifier: Mapped[str] = mapped_column(db.String, nullable=False, unique=True)
